name: week_2_server
on:
  push:
    branches: [main]
  pull_request: 
    branches: [main]

env:
  SERVICE_PATH: week_2/config
  SERVICE_NAME: server
  DOCKER_REGISTRY_URL: cr.selcloud.ru/mfisher1411

jobs:
  

  

  image-build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    
    outputs:
      docker-image: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate env file
        run: |
          touch ${{ env.SERVICE_PATH }}/prod.env
          echo "${{ secrets.PG_PROD_ENV_FILE }}" > ${{ env.SERVICE_PATH }}/prod.env

      - name: Setup Docker Tag
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{env.DOCKER_REGISTRY_URL}}/${{env.SERVICE_NAME}}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=sha,prefix=,suffix=,format=short

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{env.DOCKER_REGISTRY_URL}}
          username: ${{secrets.DOCKER_REGISTRY_USERNAME}}
          password: ${{secrets.DOCKER_REGISTRY_PASSWORD}}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          file: ${{ env.SERVICE_PATH }}/Dockerfile
          build-args: |
            ENV_FILE=prod.env
          context: week_2/config
          no-cache: true
          provenance: false  # With this setting tags appear in registry!

  deploy:
    name: Deploy service
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request'}}
    needs:
      - image-build-and-push
    steps:
      - name: Deploy to Selectel Cloud
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          script: |
            # Login into Selectel Registry
            docker login -u ${{secrets.DOCKER_REGISTRY_USERNAME}} -p ${{secrets.DOCKER_REGISTRY_PASSWORD}} ${{env.DOCKER_REGISTRY_URL}}

            # Create a network if it does not exist
            docker network inspect ${{env.SERVICE_NAME}} >/dev/null 2>&1 || docker network create ${{env.SERVICE_NAME}}
            
            # Stop running container
            docker stop ${{env.SERVICE_NAME}} || true
            
            # Remove old container
            docker rm  ${{env.SERVICE_NAME}} || true
            
            # Run a new container from a new image
            docker run -d -p 50051:50051 --network ${{env.SERVICE_NAME}} --name ${{env.SERVICE_NAME}} -t ${{needs.image-build-and-push.outputs.docker-image}}